(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"./node_modules/@graphiql/react/dist/introspection.es.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return SchemaMetaFieldDef})),__webpack_require__.d(__webpack_exports__,"b",(function(){return TypeMetaFieldDef})),__webpack_require__.d(__webpack_exports__,"c",(function(){return TypeNameMetaFieldDef}));var __defProp=Object.defineProperty,__name=(target,value)=>__defProp(target,"name",{value:value,configurable:!0});function inspect(value){return formatValue(value,[])}function formatValue(value,seenValues){switch(typeof value){case"string":return JSON.stringify(value);case"function":return value.name?`[function ${value.name}]`:"[function]";case"object":return formatObjectValue(value,seenValues);default:return String(value)}}function formatObjectValue(value,previouslySeenValues){if(null===value)return"null";if(previouslySeenValues.includes(value))return"[Circular]";const seenValues=[...previouslySeenValues,value];if(isJSONable(value)){const jsonValue=value.toJSON();if(jsonValue!==value)return"string"==typeof jsonValue?jsonValue:formatValue(jsonValue,seenValues)}else if(Array.isArray(value))return formatArray(value,seenValues);return formatObject(value,seenValues)}function isJSONable(value){return"function"==typeof value.toJSON}function formatObject(object,seenValues){const entries=Object.entries(object);if(0===entries.length)return"{}";if(seenValues.length>2)return"["+getObjectTag(object)+"]";return"{ "+entries.map((([key,value])=>key+": "+formatValue(value,seenValues))).join(", ")+" }"}function formatArray(array,seenValues){if(0===array.length)return"[]";if(seenValues.length>2)return"[Array]";const len=Math.min(10,array.length),remaining=array.length-len,items=[];for(let i=0;i<len;++i)items.push(formatValue(array[i],seenValues));return 1===remaining?items.push("... 1 more item"):remaining>1&&items.push(`... ${remaining} more items`),"["+items.join(", ")+"]"}function getObjectTag(object){const tag=Object.prototype.toString.call(object).replace(/^\[object /,"").replace(/]$/,"");if("Object"===tag&&"function"==typeof object.constructor){const name=object.constructor.name;if("string"==typeof name&&""!==name)return name}return tag}function invariant(condition,message){if(!Boolean(condition))throw new Error(null!=message?message:"Unexpected invariant triggered.")}let DirectiveLocation;var DirectiveLocation2;function isWhiteSpace(code){return 9===code||32===code}function isDigit$1(code){return code>=48&&code<=57}function isLetter(code){return code>=97&&code<=122||code>=65&&code<=90}function isNameStart(code){return isLetter(code)||95===code}function isNameContinue(code){return isLetter(code)||isDigit$1(code)||95===code}function printBlockString(value,options){const escapedValue=value.replace(/"""/g,'\\"""'),lines=escapedValue.split(/\r\n|[\n\r]/g),isSingleLine=1===lines.length,forceLeadingNewLine=lines.length>1&&lines.slice(1).every((line=>0===line.length||isWhiteSpace(line.charCodeAt(0)))),hasTrailingTripleQuotes=escapedValue.endsWith('\\"""'),hasTrailingQuote=value.endsWith('"')&&!hasTrailingTripleQuotes,hasTrailingSlash=value.endsWith("\\"),forceTrailingNewline=hasTrailingQuote||hasTrailingSlash,printAsMultipleLines=!(null!=options&&options.minimize)&&(!isSingleLine||value.length>70||forceTrailingNewline||forceLeadingNewLine||hasTrailingTripleQuotes);let result="";const skipLeadingNewLine=isSingleLine&&isWhiteSpace(value.charCodeAt(0));return(printAsMultipleLines&&!skipLeadingNewLine||forceLeadingNewLine)&&(result+="\n"),result+=escapedValue,(printAsMultipleLines||forceTrailingNewline)&&(result+="\n"),'"""'+result+'"""'}function printString(str){return`"${str.replace(escapedRegExp,escapedReplacer)}"`}__name(inspect,"inspect"),__name(formatValue,"formatValue"),__name(formatObjectValue,"formatObjectValue"),__name(isJSONable,"isJSONable"),__name(formatObject,"formatObject"),__name(formatArray,"formatArray"),__name(getObjectTag,"getObjectTag"),__name(invariant,"invariant"),(DirectiveLocation2=DirectiveLocation||(DirectiveLocation={})).QUERY="QUERY",DirectiveLocation2.MUTATION="MUTATION",DirectiveLocation2.SUBSCRIPTION="SUBSCRIPTION",DirectiveLocation2.FIELD="FIELD",DirectiveLocation2.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",DirectiveLocation2.FRAGMENT_SPREAD="FRAGMENT_SPREAD",DirectiveLocation2.INLINE_FRAGMENT="INLINE_FRAGMENT",DirectiveLocation2.VARIABLE_DEFINITION="VARIABLE_DEFINITION",DirectiveLocation2.SCHEMA="SCHEMA",DirectiveLocation2.SCALAR="SCALAR",DirectiveLocation2.OBJECT="OBJECT",DirectiveLocation2.FIELD_DEFINITION="FIELD_DEFINITION",DirectiveLocation2.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",DirectiveLocation2.INTERFACE="INTERFACE",DirectiveLocation2.UNION="UNION",DirectiveLocation2.ENUM="ENUM",DirectiveLocation2.ENUM_VALUE="ENUM_VALUE",DirectiveLocation2.INPUT_OBJECT="INPUT_OBJECT",DirectiveLocation2.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION",__name(isWhiteSpace,"isWhiteSpace"),__name(isDigit$1,"isDigit$1"),__name(isLetter,"isLetter"),__name(isNameStart,"isNameStart"),__name(isNameContinue,"isNameContinue"),__name(printBlockString,"printBlockString"),__name(printString,"printString");const escapedRegExp=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function escapedReplacer(str){return escapeSequences[str.charCodeAt(0)]}__name(escapedReplacer,"escapedReplacer");const escapeSequences=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"];function devAssert(condition,message){if(!Boolean(condition))throw new Error(message)}__name(devAssert,"devAssert");const QueryDocumentKeys={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},kindValues=new Set(Object.keys(QueryDocumentKeys));function isNode(maybeNode){const maybeKind=null==maybeNode?void 0:maybeNode.kind;return"string"==typeof maybeKind&&kindValues.has(maybeKind)}let OperationTypeNode;var OperationTypeNode2;let Kind;var Kind2;__name(isNode,"isNode"),(OperationTypeNode2=OperationTypeNode||(OperationTypeNode={})).QUERY="query",OperationTypeNode2.MUTATION="mutation",OperationTypeNode2.SUBSCRIPTION="subscription",(Kind2=Kind||(Kind={})).NAME="Name",Kind2.DOCUMENT="Document",Kind2.OPERATION_DEFINITION="OperationDefinition",Kind2.VARIABLE_DEFINITION="VariableDefinition",Kind2.SELECTION_SET="SelectionSet",Kind2.FIELD="Field",Kind2.ARGUMENT="Argument",Kind2.FRAGMENT_SPREAD="FragmentSpread",Kind2.INLINE_FRAGMENT="InlineFragment",Kind2.FRAGMENT_DEFINITION="FragmentDefinition",Kind2.VARIABLE="Variable",Kind2.INT="IntValue",Kind2.FLOAT="FloatValue",Kind2.STRING="StringValue",Kind2.BOOLEAN="BooleanValue",Kind2.NULL="NullValue",Kind2.ENUM="EnumValue",Kind2.LIST="ListValue",Kind2.OBJECT="ObjectValue",Kind2.OBJECT_FIELD="ObjectField",Kind2.DIRECTIVE="Directive",Kind2.NAMED_TYPE="NamedType",Kind2.LIST_TYPE="ListType",Kind2.NON_NULL_TYPE="NonNullType",Kind2.SCHEMA_DEFINITION="SchemaDefinition",Kind2.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",Kind2.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",Kind2.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",Kind2.FIELD_DEFINITION="FieldDefinition",Kind2.INPUT_VALUE_DEFINITION="InputValueDefinition",Kind2.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",Kind2.UNION_TYPE_DEFINITION="UnionTypeDefinition",Kind2.ENUM_TYPE_DEFINITION="EnumTypeDefinition",Kind2.ENUM_VALUE_DEFINITION="EnumValueDefinition",Kind2.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",Kind2.DIRECTIVE_DEFINITION="DirectiveDefinition",Kind2.SCHEMA_EXTENSION="SchemaExtension",Kind2.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",Kind2.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",Kind2.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",Kind2.UNION_TYPE_EXTENSION="UnionTypeExtension",Kind2.ENUM_TYPE_EXTENSION="EnumTypeExtension",Kind2.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension";const BREAK=Object.freeze({});function visit(root,visitor,visitorKeys=QueryDocumentKeys){const enterLeaveMap=new Map;for(const kind of Object.values(Kind))enterLeaveMap.set(kind,getEnterLeaveForKind(visitor,kind));let stack,key,parent,inArray=Array.isArray(root),keys=[root],index=-1,edits=[],node=root;const path=[],ancestors=[];do{index++;const isLeaving=index===keys.length,isEdited=isLeaving&&0!==edits.length;if(isLeaving){if(key=0===ancestors.length?void 0:path[path.length-1],node=parent,parent=ancestors.pop(),isEdited)if(inArray){node=node.slice();let editOffset=0;for(const[editKey,editValue]of edits){const arrayKey=editKey-editOffset;null===editValue?(node.splice(arrayKey,1),editOffset++):node[arrayKey]=editValue}}else{node=Object.defineProperties({},Object.getOwnPropertyDescriptors(node));for(const[editKey,editValue]of edits)node[editKey]=editValue}index=stack.index,keys=stack.keys,edits=stack.edits,inArray=stack.inArray,stack=stack.prev}else if(parent){if(key=inArray?index:keys[index],node=parent[key],null==node)continue;path.push(key)}let result;if(!Array.isArray(node)){var _enterLeaveMap$get,_enterLeaveMap$get2;isNode(node)||devAssert(!1,`Invalid AST Node: ${inspect(node)}.`);const visitFn=isLeaving?null===(_enterLeaveMap$get=enterLeaveMap.get(node.kind))||void 0===_enterLeaveMap$get?void 0:_enterLeaveMap$get.leave:null===(_enterLeaveMap$get2=enterLeaveMap.get(node.kind))||void 0===_enterLeaveMap$get2?void 0:_enterLeaveMap$get2.enter;if(result=null==visitFn?void 0:visitFn.call(visitor,node,key,parent,path,ancestors),result===BREAK)break;if(!1===result){if(!isLeaving){path.pop();continue}}else if(void 0!==result&&(edits.push([key,result]),!isLeaving)){if(!isNode(result)){path.pop();continue}node=result}}var _node$kind;if(void 0===result&&isEdited&&edits.push([key,node]),isLeaving)path.pop();else stack={inArray:inArray,index:index,keys:keys,edits:edits,prev:stack},inArray=Array.isArray(node),keys=inArray?node:null!==(_node$kind=visitorKeys[node.kind])&&void 0!==_node$kind?_node$kind:[],index=-1,edits=[],parent&&ancestors.push(parent),parent=node}while(void 0!==stack);return 0!==edits.length?edits[edits.length-1][1]:root}function getEnterLeaveForKind(visitor,kind){const kindVisitor=visitor[kind];return"object"==typeof kindVisitor?kindVisitor:"function"==typeof kindVisitor?{enter:kindVisitor,leave:void 0}:{enter:visitor.enter,leave:visitor.leave}}function print(ast){return visit(ast,printDocASTReducer)}__name(visit,"visit"),__name(getEnterLeaveForKind,"getEnterLeaveForKind"),__name(print,"print");const printDocASTReducer={Name:{leave:node=>node.value},Variable:{leave:node=>"$"+node.name},Document:{leave:node=>join(node.definitions,"\n\n")},OperationDefinition:{leave(node){const varDefs=wrap("(",join(node.variableDefinitions,", "),")"),prefix=join([node.operation,join([node.name,varDefs]),join(node.directives," ")]," ");return("query"===prefix?"":prefix+" ")+node.selectionSet}},VariableDefinition:{leave:({variable:variable,type:type,defaultValue:defaultValue,directives:directives})=>variable+": "+type+wrap(" = ",defaultValue)+wrap(" ",join(directives," "))},SelectionSet:{leave:({selections:selections})=>block(selections)},Field:{leave({alias:alias,name:name,arguments:args,directives:directives,selectionSet:selectionSet}){const prefix=wrap("",alias,": ")+name;let argsLine=prefix+wrap("(",join(args,", "),")");return argsLine.length>80&&(argsLine=prefix+wrap("(\n",indent(join(args,"\n")),"\n)")),join([argsLine,join(directives," "),selectionSet]," ")}},Argument:{leave:({name:name,value:value})=>name+": "+value},FragmentSpread:{leave:({name:name,directives:directives})=>"..."+name+wrap(" ",join(directives," "))},InlineFragment:{leave:({typeCondition:typeCondition,directives:directives,selectionSet:selectionSet})=>join(["...",wrap("on ",typeCondition),join(directives," "),selectionSet]," ")},FragmentDefinition:{leave:({name:name,typeCondition:typeCondition,variableDefinitions:variableDefinitions,directives:directives,selectionSet:selectionSet})=>`fragment ${name}${wrap("(",join(variableDefinitions,", "),")")} on ${typeCondition} ${wrap("",join(directives," ")," ")}`+selectionSet},IntValue:{leave:({value:value})=>value},FloatValue:{leave:({value:value})=>value},StringValue:{leave:({value:value,block:isBlockString})=>isBlockString?printBlockString(value):printString(value)},BooleanValue:{leave:({value:value})=>value?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:value})=>value},ListValue:{leave:({values:values})=>"["+join(values,", ")+"]"},ObjectValue:{leave:({fields:fields})=>"{"+join(fields,", ")+"}"},ObjectField:{leave:({name:name,value:value})=>name+": "+value},Directive:{leave:({name:name,arguments:args})=>"@"+name+wrap("(",join(args,", "),")")},NamedType:{leave:({name:name})=>name},ListType:{leave:({type:type})=>"["+type+"]"},NonNullType:{leave:({type:type})=>type+"!"},SchemaDefinition:{leave:({description:description,directives:directives,operationTypes:operationTypes})=>wrap("",description,"\n")+join(["schema",join(directives," "),block(operationTypes)]," ")},OperationTypeDefinition:{leave:({operation:operation,type:type})=>operation+": "+type},ScalarTypeDefinition:{leave:({description:description,name:name,directives:directives})=>wrap("",description,"\n")+join(["scalar",name,join(directives," ")]," ")},ObjectTypeDefinition:{leave:({description:description,name:name,interfaces:interfaces,directives:directives,fields:fields})=>wrap("",description,"\n")+join(["type",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},FieldDefinition:{leave:({description:description,name:name,arguments:args,type:type,directives:directives})=>wrap("",description,"\n")+name+(hasMultilineItems(args)?wrap("(\n",indent(join(args,"\n")),"\n)"):wrap("(",join(args,", "),")"))+": "+type+wrap(" ",join(directives," "))},InputValueDefinition:{leave:({description:description,name:name,type:type,defaultValue:defaultValue,directives:directives})=>wrap("",description,"\n")+join([name+": "+type,wrap("= ",defaultValue),join(directives," ")]," ")},InterfaceTypeDefinition:{leave:({description:description,name:name,interfaces:interfaces,directives:directives,fields:fields})=>wrap("",description,"\n")+join(["interface",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},UnionTypeDefinition:{leave:({description:description,name:name,directives:directives,types:types})=>wrap("",description,"\n")+join(["union",name,join(directives," "),wrap("= ",join(types," | "))]," ")},EnumTypeDefinition:{leave:({description:description,name:name,directives:directives,values:values})=>wrap("",description,"\n")+join(["enum",name,join(directives," "),block(values)]," ")},EnumValueDefinition:{leave:({description:description,name:name,directives:directives})=>wrap("",description,"\n")+join([name,join(directives," ")]," ")},InputObjectTypeDefinition:{leave:({description:description,name:name,directives:directives,fields:fields})=>wrap("",description,"\n")+join(["input",name,join(directives," "),block(fields)]," ")},DirectiveDefinition:{leave:({description:description,name:name,arguments:args,repeatable:repeatable,locations:locations})=>wrap("",description,"\n")+"directive @"+name+(hasMultilineItems(args)?wrap("(\n",indent(join(args,"\n")),"\n)"):wrap("(",join(args,", "),")"))+(repeatable?" repeatable":"")+" on "+join(locations," | ")},SchemaExtension:{leave:({directives:directives,operationTypes:operationTypes})=>join(["extend schema",join(directives," "),block(operationTypes)]," ")},ScalarTypeExtension:{leave:({name:name,directives:directives})=>join(["extend scalar",name,join(directives," ")]," ")},ObjectTypeExtension:{leave:({name:name,interfaces:interfaces,directives:directives,fields:fields})=>join(["extend type",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},InterfaceTypeExtension:{leave:({name:name,interfaces:interfaces,directives:directives,fields:fields})=>join(["extend interface",name,wrap("implements ",join(interfaces," & ")),join(directives," "),block(fields)]," ")},UnionTypeExtension:{leave:({name:name,directives:directives,types:types})=>join(["extend union",name,join(directives," "),wrap("= ",join(types," | "))]," ")},EnumTypeExtension:{leave:({name:name,directives:directives,values:values})=>join(["extend enum",name,join(directives," "),block(values)]," ")},InputObjectTypeExtension:{leave:({name:name,directives:directives,fields:fields})=>join(["extend input",name,join(directives," "),block(fields)]," ")}};function join(maybeArray,separator=""){var _maybeArray$filter$jo;return null!==(_maybeArray$filter$jo=null==maybeArray?void 0:maybeArray.filter((x=>x)).join(separator))&&void 0!==_maybeArray$filter$jo?_maybeArray$filter$jo:""}function block(array){return wrap("{\n",indent(join(array,"\n")),"\n}")}function wrap(start,maybeString,end=""){return null!=maybeString&&""!==maybeString?start+maybeString+end:""}function indent(str){return wrap("  ",str.replace(/\n/g,"\n  "))}function hasMultilineItems(maybeArray){var _maybeArray$some;return null!==(_maybeArray$some=null==maybeArray?void 0:maybeArray.some((str=>str.includes("\n"))))&&void 0!==_maybeArray$some&&_maybeArray$some}function isIterableObject(maybeIterable){return"object"==typeof maybeIterable&&"function"==typeof(null==maybeIterable?void 0:maybeIterable[Symbol.iterator])}function isObjectLike(value){return"object"==typeof value&&null!==value}__name(join,"join"),__name(block,"block"),__name(wrap,"wrap"),__name(indent,"indent"),__name(hasMultilineItems,"hasMultilineItems"),__name(isIterableObject,"isIterableObject"),__name(isObjectLike,"isObjectLike");function didYouMean(firstArg,secondArg){const[subMessage,suggestionsArg]=secondArg?[firstArg,secondArg]:[void 0,firstArg];let message=" Did you mean ";subMessage&&(message+=subMessage+" ");const suggestions=suggestionsArg.map((x=>`"${x}"`));switch(suggestions.length){case 0:return"";case 1:return message+suggestions[0]+"?";case 2:return message+suggestions[0]+" or "+suggestions[1]+"?"}const selected=suggestions.slice(0,5),lastItem=selected.pop();return message+selected.join(", ")+", or "+lastItem+"?"}function identityFunc(x){return x}__name(didYouMean,"didYouMean"),__name(identityFunc,"identityFunc");const instanceOf=__name((function instanceOf2(value,constructor){return value instanceof constructor}),"instanceOf");function keyMap(list,keyFn){const result=Object.create(null);for(const item of list)result[keyFn(item)]=item;return result}function keyValMap(list,keyFn,valFn){const result=Object.create(null);for(const item of list)result[keyFn(item)]=valFn(item);return result}function mapValue(map,fn){const result=Object.create(null);for(const key of Object.keys(map))result[key]=fn(map[key],key);return result}function naturalCompare(aStr,bStr){let aIndex=0,bIndex=0;for(;aIndex<aStr.length&&bIndex<bStr.length;){let aChar=aStr.charCodeAt(aIndex),bChar=bStr.charCodeAt(bIndex);if(isDigit(aChar)&&isDigit(bChar)){let aNum=0;do{++aIndex,aNum=10*aNum+aChar-DIGIT_0,aChar=aStr.charCodeAt(aIndex)}while(isDigit(aChar)&&aNum>0);let bNum=0;do{++bIndex,bNum=10*bNum+bChar-DIGIT_0,bChar=bStr.charCodeAt(bIndex)}while(isDigit(bChar)&&bNum>0);if(aNum<bNum)return-1;if(aNum>bNum)return 1}else{if(aChar<bChar)return-1;if(aChar>bChar)return 1;++aIndex,++bIndex}}return aStr.length-bStr.length}__name(keyMap,"keyMap"),__name(keyValMap,"keyValMap"),__name(mapValue,"mapValue"),__name(naturalCompare,"naturalCompare");const DIGIT_0=48;function isDigit(code){return!isNaN(code)&&DIGIT_0<=code&&code<=57}function suggestionList(input,options){const optionsByDistance=Object.create(null),lexicalDistance=new LexicalDistance(input),threshold=Math.floor(.4*input.length)+1;for(const option of options){const distance=lexicalDistance.measure(option,threshold);void 0!==distance&&(optionsByDistance[option]=distance)}return Object.keys(optionsByDistance).sort(((a,b)=>{const distanceDiff=optionsByDistance[a]-optionsByDistance[b];return 0!==distanceDiff?distanceDiff:naturalCompare(a,b)}))}__name(isDigit,"isDigit"),__name(suggestionList,"suggestionList");class LexicalDistance{constructor(input){this._input=input,this._inputLowerCase=input.toLowerCase(),this._inputArray=stringToArray(this._inputLowerCase),this._rows=[new Array(input.length+1).fill(0),new Array(input.length+1).fill(0),new Array(input.length+1).fill(0)]}measure(option,threshold){if(this._input===option)return 0;const optionLowerCase=option.toLowerCase();if(this._inputLowerCase===optionLowerCase)return 1;let a=stringToArray(optionLowerCase),b=this._inputArray;if(a.length<b.length){const tmp=a;a=b,b=tmp}const aLength=a.length,bLength=b.length;if(aLength-bLength>threshold)return;const rows=this._rows;for(let j=0;j<=bLength;j++)rows[0][j]=j;for(let i=1;i<=aLength;i++){const upRow=rows[(i-1)%3],currentRow=rows[i%3];let smallestCell=currentRow[0]=i;for(let j=1;j<=bLength;j++){const cost=a[i-1]===b[j-1]?0:1;let currentCell=Math.min(upRow[j]+1,currentRow[j-1]+1,upRow[j-1]+cost);if(i>1&&j>1&&a[i-1]===b[j-2]&&a[i-2]===b[j-1]){const doubleDiagonalCell=rows[(i-2)%3][j-2];currentCell=Math.min(currentCell,doubleDiagonalCell+1)}currentCell<smallestCell&&(smallestCell=currentCell),currentRow[j]=currentCell}if(smallestCell>threshold)return}const distance=rows[aLength%3][bLength];return distance<=threshold?distance:void 0}}function stringToArray(str){const strLength=str.length,array=new Array(strLength);for(let i=0;i<strLength;++i)array[i]=str.charCodeAt(i);return array}function toObjMap(obj){if(null==obj)return Object.create(null);if(null===Object.getPrototypeOf(obj))return obj;const map=Object.create(null);for(const[key,value]of Object.entries(obj))map[key]=value;return map}__name(LexicalDistance,"LexicalDistance"),__name(stringToArray,"stringToArray"),__name(toObjMap,"toObjMap");const LineRegExp=/\r\n|[\n\r]/g;function getLocation(source,position){let lastLineStart=0,line=1;for(const match of source.body.matchAll(LineRegExp)){if("number"==typeof match.index||invariant(!1),match.index>=position)break;lastLineStart=match.index+match[0].length,line+=1}return{line:line,column:position+1-lastLineStart}}function printLocation(location){return printSourceLocation(location.source,getLocation(location.source,location.start))}function printSourceLocation(source,sourceLocation){const firstLineColumnOffset=source.locationOffset.column-1,body="".padStart(firstLineColumnOffset)+source.body,lineIndex=sourceLocation.line-1,lineOffset=source.locationOffset.line-1,lineNum=sourceLocation.line+lineOffset,columnOffset=1===sourceLocation.line?firstLineColumnOffset:0,columnNum=sourceLocation.column+columnOffset,locationStr=`${source.name}:${lineNum}:${columnNum}\n`,lines=body.split(/\r\n|[\n\r]/g),locationLine=lines[lineIndex];if(locationLine.length>120){const subLineIndex=Math.floor(columnNum/80),subLineColumnNum=columnNum%80,subLines=[];for(let i=0;i<locationLine.length;i+=80)subLines.push(locationLine.slice(i,i+80));return locationStr+printPrefixedLines([[`${lineNum} |`,subLines[0]],...subLines.slice(1,subLineIndex+1).map((subLine=>["|",subLine])),["|","^".padStart(subLineColumnNum)],["|",subLines[subLineIndex+1]]])}return locationStr+printPrefixedLines([[lineNum-1+" |",lines[lineIndex-1]],[`${lineNum} |`,locationLine],["|","^".padStart(columnNum)],[`${lineNum+1} |`,lines[lineIndex+1]]])}function printPrefixedLines(lines){const existingLines=lines.filter((([_,line])=>void 0!==line)),padLen=Math.max(...existingLines.map((([prefix])=>prefix.length)));return existingLines.map((([prefix,line])=>prefix.padStart(padLen)+(line?" "+line:""))).join("\n")}function toNormalizedOptions(args){const firstArg=args[0];return null==firstArg||"kind"in firstArg||"length"in firstArg?{nodes:firstArg,source:args[1],positions:args[2],path:args[3],originalError:args[4],extensions:args[5]}:firstArg}__name(getLocation,"getLocation"),__name(printLocation,"printLocation"),__name(printSourceLocation,"printSourceLocation"),__name(printPrefixedLines,"printPrefixedLines"),__name(toNormalizedOptions,"toNormalizedOptions");class GraphQLError extends Error{constructor(message,...rawArgs){var _this$nodes,_nodeLocations$,_ref;const{nodes:nodes,source:source,positions:positions,path:path,originalError:originalError,extensions:extensions}=toNormalizedOptions(rawArgs);super(message),this.name="GraphQLError",this.path=null!=path?path:void 0,this.originalError=null!=originalError?originalError:void 0,this.nodes=undefinedIfEmpty(Array.isArray(nodes)?nodes:nodes?[nodes]:void 0);const nodeLocations=undefinedIfEmpty(null===(_this$nodes=this.nodes)||void 0===_this$nodes?void 0:_this$nodes.map((node=>node.loc)).filter((loc=>null!=loc)));this.source=null!=source?source:null==nodeLocations||null===(_nodeLocations$=nodeLocations[0])||void 0===_nodeLocations$?void 0:_nodeLocations$.source,this.positions=null!=positions?positions:null==nodeLocations?void 0:nodeLocations.map((loc=>loc.start)),this.locations=positions&&source?positions.map((pos=>getLocation(source,pos))):null==nodeLocations?void 0:nodeLocations.map((loc=>getLocation(loc.source,loc.start)));const originalExtensions=isObjectLike(null==originalError?void 0:originalError.extensions)?null==originalError?void 0:originalError.extensions:void 0;this.extensions=null!==(_ref=null!=extensions?extensions:originalExtensions)&&void 0!==_ref?_ref:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=originalError&&originalError.stack?Object.defineProperty(this,"stack",{value:originalError.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,GraphQLError):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let output=this.message;if(this.nodes)for(const node of this.nodes)node.loc&&(output+="\n\n"+printLocation(node.loc));else if(this.source&&this.locations)for(const location of this.locations)output+="\n\n"+printSourceLocation(this.source,location);return output}toJSON(){const formattedError={message:this.message};return null!=this.locations&&(formattedError.locations=this.locations),null!=this.path&&(formattedError.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(formattedError.extensions=this.extensions),formattedError}}function undefinedIfEmpty(array){return void 0===array||0===array.length?void 0:array}function valueFromASTUntyped(valueNode,variables){switch(valueNode.kind){case Kind.NULL:return null;case Kind.INT:return parseInt(valueNode.value,10);case Kind.FLOAT:return parseFloat(valueNode.value);case Kind.STRING:case Kind.ENUM:case Kind.BOOLEAN:return valueNode.value;case Kind.LIST:return valueNode.values.map((node=>valueFromASTUntyped(node,variables)));case Kind.OBJECT:return keyValMap(valueNode.fields,(field=>field.name.value),(field=>valueFromASTUntyped(field.value,variables)));case Kind.VARIABLE:return null==variables?void 0:variables[valueNode.name.value]}}function assertName(name){if(null!=name||devAssert(!1,"Must provide name."),"string"==typeof name||devAssert(!1,"Expected name to be a string."),0===name.length)throw new GraphQLError("Expected name to be a non-empty string.");for(let i=1;i<name.length;++i)if(!isNameContinue(name.charCodeAt(i)))throw new GraphQLError(`Names must only contain [_a-zA-Z0-9] but "${name}" does not.`);if(!isNameStart(name.charCodeAt(0)))throw new GraphQLError(`Names must start with [_a-zA-Z] but "${name}" does not.`);return name}function assertEnumValueName(name){if("true"===name||"false"===name||"null"===name)throw new GraphQLError(`Enum values cannot be named: ${name}`);return assertName(name)}function isType(type){return isScalarType(type)||isObjectType(type)||isInterfaceType(type)||isUnionType(type)||isEnumType(type)||isInputObjectType(type)||isListType(type)||isNonNullType(type)}function isScalarType(type){return instanceOf(type,GraphQLScalarType)}function isObjectType(type){return instanceOf(type,GraphQLObjectType)}function isInterfaceType(type){return instanceOf(type,GraphQLInterfaceType)}function isUnionType(type){return instanceOf(type,GraphQLUnionType)}function isEnumType(type){return instanceOf(type,GraphQLEnumType)}function isInputObjectType(type){return instanceOf(type,GraphQLInputObjectType)}function isListType(type){return instanceOf(type,GraphQLList)}function isNonNullType(type){return instanceOf(type,GraphQLNonNull)}function isLeafType(type){return isScalarType(type)||isEnumType(type)}function isAbstractType(type){return isInterfaceType(type)||isUnionType(type)}__name(GraphQLError,"GraphQLError"),__name(undefinedIfEmpty,"undefinedIfEmpty"),__name(valueFromASTUntyped,"valueFromASTUntyped"),__name(assertName,"assertName"),__name(assertEnumValueName,"assertEnumValueName"),__name(isType,"isType"),__name(isScalarType,"isScalarType"),__name(isObjectType,"isObjectType"),__name(isInterfaceType,"isInterfaceType"),__name(isUnionType,"isUnionType"),__name(isEnumType,"isEnumType"),__name(isInputObjectType,"isInputObjectType"),__name(isListType,"isListType"),__name(isNonNullType,"isNonNullType"),__name(isLeafType,"isLeafType"),__name(isAbstractType,"isAbstractType");class GraphQLList{constructor(ofType){isType(ofType)||devAssert(!1,`Expected ${inspect(ofType)} to be a GraphQL type.`),this.ofType=ofType}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}__name(GraphQLList,"GraphQLList");class GraphQLNonNull{constructor(ofType){isNullableType(ofType)||devAssert(!1,`Expected ${inspect(ofType)} to be a GraphQL nullable type.`),this.ofType=ofType}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function isNullableType(type){return isType(type)&&!isNonNullType(type)}function resolveReadonlyArrayThunk(thunk){return"function"==typeof thunk?thunk():thunk}function resolveObjMapThunk(thunk){return"function"==typeof thunk?thunk():thunk}__name(GraphQLNonNull,"GraphQLNonNull"),__name(isNullableType,"isNullableType"),__name(resolveReadonlyArrayThunk,"resolveReadonlyArrayThunk"),__name(resolveObjMapThunk,"resolveObjMapThunk");class GraphQLScalarType{constructor(config){var _config$parseValue,_config$serialize,_config$parseLiteral,_config$extensionASTN;const parseValue=null!==(_config$parseValue=config.parseValue)&&void 0!==_config$parseValue?_config$parseValue:identityFunc;this.name=assertName(config.name),this.description=config.description,this.specifiedByURL=config.specifiedByURL,this.serialize=null!==(_config$serialize=config.serialize)&&void 0!==_config$serialize?_config$serialize:identityFunc,this.parseValue=parseValue,this.parseLiteral=null!==(_config$parseLiteral=config.parseLiteral)&&void 0!==_config$parseLiteral?_config$parseLiteral:(node,variables)=>parseValue(valueFromASTUntyped(node,variables)),this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN=config.extensionASTNodes)&&void 0!==_config$extensionASTN?_config$extensionASTN:[],null==config.specifiedByURL||"string"==typeof config.specifiedByURL||devAssert(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${inspect(config.specifiedByURL)}.`),null==config.serialize||"function"==typeof config.serialize||devAssert(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),config.parseLiteral&&("function"==typeof config.parseValue&&"function"==typeof config.parseLiteral||devAssert(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}__name(GraphQLScalarType,"GraphQLScalarType");class GraphQLObjectType{constructor(config){var _config$extensionASTN2;this.name=assertName(config.name),this.description=config.description,this.isTypeOf=config.isTypeOf,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN2=config.extensionASTNodes)&&void 0!==_config$extensionASTN2?_config$extensionASTN2:[],this._fields=()=>defineFieldMap(config),this._interfaces=()=>defineInterfaces(config),null==config.isTypeOf||"function"==typeof config.isTypeOf||devAssert(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${inspect(config.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fieldsToFieldsConfig(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function defineInterfaces(config){var _config$interfaces;const interfaces=resolveReadonlyArrayThunk(null!==(_config$interfaces=config.interfaces)&&void 0!==_config$interfaces?_config$interfaces:[]);return Array.isArray(interfaces)||devAssert(!1,`${config.name} interfaces must be an Array or a function which returns an Array.`),interfaces}function defineFieldMap(config){const fieldMap=resolveObjMapThunk(config.fields);return isPlainObj(fieldMap)||devAssert(!1,`${config.name} fields must be an object with field names as keys or a function which returns such an object.`),mapValue(fieldMap,((fieldConfig,fieldName)=>{var _fieldConfig$args;isPlainObj(fieldConfig)||devAssert(!1,`${config.name}.${fieldName} field config must be an object.`),null==fieldConfig.resolve||"function"==typeof fieldConfig.resolve||devAssert(!1,`${config.name}.${fieldName} field resolver must be a function if provided, but got: ${inspect(fieldConfig.resolve)}.`);const argsConfig=null!==(_fieldConfig$args=fieldConfig.args)&&void 0!==_fieldConfig$args?_fieldConfig$args:{};return isPlainObj(argsConfig)||devAssert(!1,`${config.name}.${fieldName} args must be an object with argument names as keys.`),{name:assertName(fieldName),description:fieldConfig.description,type:fieldConfig.type,args:defineArguments(argsConfig),resolve:fieldConfig.resolve,subscribe:fieldConfig.subscribe,deprecationReason:fieldConfig.deprecationReason,extensions:toObjMap(fieldConfig.extensions),astNode:fieldConfig.astNode}}))}function defineArguments(config){return Object.entries(config).map((([argName,argConfig])=>({name:assertName(argName),description:argConfig.description,type:argConfig.type,defaultValue:argConfig.defaultValue,deprecationReason:argConfig.deprecationReason,extensions:toObjMap(argConfig.extensions),astNode:argConfig.astNode})))}function isPlainObj(obj){return isObjectLike(obj)&&!Array.isArray(obj)}function fieldsToFieldsConfig(fields){return mapValue(fields,(field=>({description:field.description,type:field.type,args:argsToArgsConfig(field.args),resolve:field.resolve,subscribe:field.subscribe,deprecationReason:field.deprecationReason,extensions:field.extensions,astNode:field.astNode})))}function argsToArgsConfig(args){return keyValMap(args,(arg=>arg.name),(arg=>({description:arg.description,type:arg.type,defaultValue:arg.defaultValue,deprecationReason:arg.deprecationReason,extensions:arg.extensions,astNode:arg.astNode})))}__name(GraphQLObjectType,"GraphQLObjectType"),__name(defineInterfaces,"defineInterfaces"),__name(defineFieldMap,"defineFieldMap"),__name(defineArguments,"defineArguments"),__name(isPlainObj,"isPlainObj"),__name(fieldsToFieldsConfig,"fieldsToFieldsConfig"),__name(argsToArgsConfig,"argsToArgsConfig");class GraphQLInterfaceType{constructor(config){var _config$extensionASTN3;this.name=assertName(config.name),this.description=config.description,this.resolveType=config.resolveType,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN3=config.extensionASTNodes)&&void 0!==_config$extensionASTN3?_config$extensionASTN3:[],this._fields=defineFieldMap.bind(void 0,config),this._interfaces=defineInterfaces.bind(void 0,config),null==config.resolveType||"function"==typeof config.resolveType||devAssert(!1,`${this.name} must provide "resolveType" as a function, but got: ${inspect(config.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:fieldsToFieldsConfig(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}__name(GraphQLInterfaceType,"GraphQLInterfaceType");class GraphQLUnionType{constructor(config){var _config$extensionASTN4;this.name=assertName(config.name),this.description=config.description,this.resolveType=config.resolveType,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN4=config.extensionASTNodes)&&void 0!==_config$extensionASTN4?_config$extensionASTN4:[],this._types=defineTypes.bind(void 0,config),null==config.resolveType||"function"==typeof config.resolveType||devAssert(!1,`${this.name} must provide "resolveType" as a function, but got: ${inspect(config.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function defineTypes(config){const types=resolveReadonlyArrayThunk(config.types);return Array.isArray(types)||devAssert(!1,`Must provide Array of types or a function which returns such an array for Union ${config.name}.`),types}__name(GraphQLUnionType,"GraphQLUnionType"),__name(defineTypes,"defineTypes");class GraphQLEnumType{constructor(config){var _config$extensionASTN5;this.name=assertName(config.name),this.description=config.description,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN5=config.extensionASTNodes)&&void 0!==_config$extensionASTN5?_config$extensionASTN5:[],this._values=defineEnumValues(this.name,config.values),this._valueLookup=new Map(this._values.map((enumValue=>[enumValue.value,enumValue]))),this._nameLookup=keyMap(this._values,(value=>value.name))}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(name){return this._nameLookup[name]}serialize(outputValue){const enumValue=this._valueLookup.get(outputValue);if(void 0===enumValue)throw new GraphQLError(`Enum "${this.name}" cannot represent value: ${inspect(outputValue)}`);return enumValue.name}parseValue(inputValue){if("string"!=typeof inputValue){const valueStr=inspect(inputValue);throw new GraphQLError(`Enum "${this.name}" cannot represent non-string value: ${valueStr}.`+didYouMeanEnumValue(this,valueStr))}const enumValue=this.getValue(inputValue);if(null==enumValue)throw new GraphQLError(`Value "${inputValue}" does not exist in "${this.name}" enum.`+didYouMeanEnumValue(this,inputValue));return enumValue.value}parseLiteral(valueNode,_variables){if(valueNode.kind!==Kind.ENUM){const valueStr=print(valueNode);throw new GraphQLError(`Enum "${this.name}" cannot represent non-enum value: ${valueStr}.`+didYouMeanEnumValue(this,valueStr),{nodes:valueNode})}const enumValue=this.getValue(valueNode.value);if(null==enumValue){const valueStr=print(valueNode);throw new GraphQLError(`Value "${valueStr}" does not exist in "${this.name}" enum.`+didYouMeanEnumValue(this,valueStr),{nodes:valueNode})}return enumValue.value}toConfig(){const values=keyValMap(this.getValues(),(value=>value.name),(value=>({description:value.description,value:value.value,deprecationReason:value.deprecationReason,extensions:value.extensions,astNode:value.astNode})));return{name:this.name,description:this.description,values:values,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function didYouMeanEnumValue(enumType,unknownValueStr){return didYouMean("the enum value",suggestionList(unknownValueStr,enumType.getValues().map((value=>value.name))))}function defineEnumValues(typeName,valueMap){return isPlainObj(valueMap)||devAssert(!1,`${typeName} values must be an object with value names as keys.`),Object.entries(valueMap).map((([valueName,valueConfig])=>(isPlainObj(valueConfig)||devAssert(!1,`${typeName}.${valueName} must refer to an object with a "value" key representing an internal value but got: ${inspect(valueConfig)}.`),{name:assertEnumValueName(valueName),description:valueConfig.description,value:void 0!==valueConfig.value?valueConfig.value:valueName,deprecationReason:valueConfig.deprecationReason,extensions:toObjMap(valueConfig.extensions),astNode:valueConfig.astNode})))}__name(GraphQLEnumType,"GraphQLEnumType"),__name(didYouMeanEnumValue,"didYouMeanEnumValue"),__name(defineEnumValues,"defineEnumValues");class GraphQLInputObjectType{constructor(config){var _config$extensionASTN6;this.name=assertName(config.name),this.description=config.description,this.extensions=toObjMap(config.extensions),this.astNode=config.astNode,this.extensionASTNodes=null!==(_config$extensionASTN6=config.extensionASTNodes)&&void 0!==_config$extensionASTN6?_config$extensionASTN6:[],this._fields=defineInputFieldMap.bind(void 0,config)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){const fields=mapValue(this.getFields(),(field=>({description:field.description,type:field.type,defaultValue:field.defaultValue,deprecationReason:field.deprecationReason,extensions:field.extensions,astNode:field.astNode})));return{name:this.name,description:this.description,fields:fields,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function defineInputFieldMap(config){const fieldMap=resolveObjMapThunk(config.fields);return isPlainObj(fieldMap)||devAssert(!1,`${config.name} fields must be an object with field names as keys or a function which returns such an object.`),mapValue(fieldMap,((fieldConfig,fieldName)=>(!("resolve"in fieldConfig)||devAssert(!1,`${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`),{name:assertName(fieldName),description:fieldConfig.description,type:fieldConfig.type,defaultValue:fieldConfig.defaultValue,deprecationReason:fieldConfig.deprecationReason,extensions:toObjMap(fieldConfig.extensions),astNode:fieldConfig.astNode})))}__name(GraphQLInputObjectType,"GraphQLInputObjectType"),__name(defineInputFieldMap,"defineInputFieldMap");const GraphQLInt=new GraphQLScalarType({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("boolean"==typeof coercedValue)return coercedValue?1:0;let num=coercedValue;if("string"==typeof coercedValue&&""!==coercedValue&&(num=Number(coercedValue)),"number"!=typeof num||!Number.isInteger(num))throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(coercedValue)}`);if(num>2147483647||num<-2147483648)throw new GraphQLError("Int cannot represent non 32-bit signed integer value: "+inspect(coercedValue));return num},parseValue(inputValue){if("number"!=typeof inputValue||!Number.isInteger(inputValue))throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(inputValue)}`);if(inputValue>2147483647||inputValue<-2147483648)throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${inputValue}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.INT)throw new GraphQLError(`Int cannot represent non-integer value: ${print(valueNode)}`,{nodes:valueNode});const num=parseInt(valueNode.value,10);if(num>2147483647||num<-2147483648)throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,{nodes:valueNode});return num}}),GraphQLFloat=new GraphQLScalarType({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("boolean"==typeof coercedValue)return coercedValue?1:0;let num=coercedValue;if("string"==typeof coercedValue&&""!==coercedValue&&(num=Number(coercedValue)),"number"!=typeof num||!Number.isFinite(num))throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(coercedValue)}`);return num},parseValue(inputValue){if("number"!=typeof inputValue||!Number.isFinite(inputValue))throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.FLOAT&&valueNode.kind!==Kind.INT)throw new GraphQLError(`Float cannot represent non numeric value: ${print(valueNode)}`,valueNode);return parseFloat(valueNode.value)}}),GraphQLString=new GraphQLScalarType({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("string"==typeof coercedValue)return coercedValue;if("boolean"==typeof coercedValue)return coercedValue?"true":"false";if("number"==typeof coercedValue&&Number.isFinite(coercedValue))return coercedValue.toString();throw new GraphQLError(`String cannot represent value: ${inspect(outputValue)}`)},parseValue(inputValue){if("string"!=typeof inputValue)throw new GraphQLError(`String cannot represent a non string value: ${inspect(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.STRING)throw new GraphQLError(`String cannot represent a non string value: ${print(valueNode)}`,{nodes:valueNode});return valueNode.value}}),GraphQLBoolean=new GraphQLScalarType({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(outputValue){const coercedValue=serializeObject(outputValue);if("boolean"==typeof coercedValue)return coercedValue;if(Number.isFinite(coercedValue))return 0!==coercedValue;throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`)},parseValue(inputValue){if("boolean"!=typeof inputValue)throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(inputValue)}`);return inputValue},parseLiteral(valueNode){if(valueNode.kind!==Kind.BOOLEAN)throw new GraphQLError(`Boolean cannot represent a non boolean value: ${print(valueNode)}`,{nodes:valueNode});return valueNode.value}}),GraphQLID=new GraphQLScalarType({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(outputValue){const coercedValue=serializeObject(outputValue);if("string"==typeof coercedValue)return coercedValue;if(Number.isInteger(coercedValue))return String(coercedValue);throw new GraphQLError(`ID cannot represent value: ${inspect(outputValue)}`)},parseValue(inputValue){if("string"==typeof inputValue)return inputValue;if("number"==typeof inputValue&&Number.isInteger(inputValue))return inputValue.toString();throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`)},parseLiteral(valueNode){if(valueNode.kind!==Kind.STRING&&valueNode.kind!==Kind.INT)throw new GraphQLError("ID cannot represent a non-string and non-integer value: "+print(valueNode),{nodes:valueNode});return valueNode.value}});function serializeObject(outputValue){if(isObjectLike(outputValue)){if("function"==typeof outputValue.valueOf){const valueOfResult=outputValue.valueOf();if(!isObjectLike(valueOfResult))return valueOfResult}if("function"==typeof outputValue.toJSON)return outputValue.toJSON()}return outputValue}function astFromValue(value,type){if(isNonNullType(type)){const astValue=astFromValue(value,type.ofType);return(null==astValue?void 0:astValue.kind)===Kind.NULL?null:astValue}if(null===value)return{kind:Kind.NULL};if(void 0===value)return null;if(isListType(type)){const itemType=type.ofType;if(isIterableObject(value)){const valuesNodes=[];for(const item of value){const itemNode=astFromValue(item,itemType);null!=itemNode&&valuesNodes.push(itemNode)}return{kind:Kind.LIST,values:valuesNodes}}return astFromValue(value,itemType)}if(isInputObjectType(type)){if(!isObjectLike(value))return null;const fieldNodes=[];for(const field of Object.values(type.getFields())){const fieldValue=astFromValue(value[field.name],field.type);fieldValue&&fieldNodes.push({kind:Kind.OBJECT_FIELD,name:{kind:Kind.NAME,value:field.name},value:fieldValue})}return{kind:Kind.OBJECT,fields:fieldNodes}}if(isLeafType(type)){const serialized=type.serialize(value);if(null==serialized)return null;if("boolean"==typeof serialized)return{kind:Kind.BOOLEAN,value:serialized};if("number"==typeof serialized&&Number.isFinite(serialized)){const stringNum=String(serialized);return integerStringRegExp.test(stringNum)?{kind:Kind.INT,value:stringNum}:{kind:Kind.FLOAT,value:stringNum}}if("string"==typeof serialized)return isEnumType(type)?{kind:Kind.ENUM,value:serialized}:type===GraphQLID&&integerStringRegExp.test(serialized)?{kind:Kind.INT,value:serialized}:{kind:Kind.STRING,value:serialized};throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`)}invariant(!1,"Unexpected input type: "+inspect(type))}Object.freeze([GraphQLString,GraphQLInt,GraphQLFloat,GraphQLBoolean,GraphQLID]),__name(serializeObject,"serializeObject"),__name(astFromValue,"astFromValue");const integerStringRegExp=/^-?(?:0|[1-9][0-9]*)$/,__Schema=new GraphQLObjectType({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:GraphQLString,resolve:schema=>schema.description},types:{description:"A list of all types supported by this server.",type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),resolve:schema=>Object.values(schema.getTypeMap())},queryType:{description:"The type that query operations will be rooted at.",type:new GraphQLNonNull(__Type),resolve:schema=>schema.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:__Type,resolve:schema=>schema.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:__Type,resolve:schema=>schema.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Directive))),resolve:schema=>schema.getDirectives()}})}),__Directive=new GraphQLObjectType({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:()=>({name:{type:new GraphQLNonNull(GraphQLString),resolve:directive=>directive.name},description:{type:GraphQLString,resolve:directive=>directive.description},isRepeatable:{type:new GraphQLNonNull(GraphQLBoolean),resolve:directive=>directive.isRepeatable},locations:{type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__DirectiveLocation))),resolve:directive=>directive.locations},args:{type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),args:{includeDeprecated:{type:GraphQLBoolean,defaultValue:!1}},resolve:(field,{includeDeprecated:includeDeprecated})=>includeDeprecated?field.args:field.args.filter((arg=>null==arg.deprecationReason))}})}),__DirectiveLocation=new GraphQLEnumType({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:DirectiveLocation.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:DirectiveLocation.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:DirectiveLocation.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:DirectiveLocation.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:DirectiveLocation.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:DirectiveLocation.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:DirectiveLocation.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:DirectiveLocation.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:DirectiveLocation.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:DirectiveLocation.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:DirectiveLocation.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:DirectiveLocation.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:DirectiveLocation.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:DirectiveLocation.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:DirectiveLocation.UNION,description:"Location adjacent to a union definition."},ENUM:{value:DirectiveLocation.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:DirectiveLocation.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:DirectiveLocation.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:DirectiveLocation.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),__Type=new GraphQLObjectType({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new GraphQLNonNull(__TypeKind),resolve:type=>isScalarType(type)?TypeKind.SCALAR:isObjectType(type)?TypeKind.OBJECT:isInterfaceType(type)?TypeKind.INTERFACE:isUnionType(type)?TypeKind.UNION:isEnumType(type)?TypeKind.ENUM:isInputObjectType(type)?TypeKind.INPUT_OBJECT:isListType(type)?TypeKind.LIST:isNonNullType(type)?TypeKind.NON_NULL:void invariant(!1,`Unexpected type: "${inspect(type)}".`)},name:{type:GraphQLString,resolve:type=>"name"in type?type.name:void 0},description:{type:GraphQLString,resolve:type=>"description"in type?type.description:void 0},specifiedByURL:{type:GraphQLString,resolve:obj=>"specifiedByURL"in obj?obj.specifiedByURL:void 0},fields:{type:new GraphQLList(new GraphQLNonNull(__Field)),args:{includeDeprecated:{type:GraphQLBoolean,defaultValue:!1}},resolve(type,{includeDeprecated:includeDeprecated}){if(isObjectType(type)||isInterfaceType(type)){const fields=Object.values(type.getFields());return includeDeprecated?fields:fields.filter((field=>null==field.deprecationReason))}}},interfaces:{type:new GraphQLList(new GraphQLNonNull(__Type)),resolve(type){if(isObjectType(type)||isInterfaceType(type))return type.getInterfaces()}},possibleTypes:{type:new GraphQLList(new GraphQLNonNull(__Type)),resolve(type,_args,_context,{schema:schema}){if(isAbstractType(type))return schema.getPossibleTypes(type)}},enumValues:{type:new GraphQLList(new GraphQLNonNull(__EnumValue)),args:{includeDeprecated:{type:GraphQLBoolean,defaultValue:!1}},resolve(type,{includeDeprecated:includeDeprecated}){if(isEnumType(type)){const values=type.getValues();return includeDeprecated?values:values.filter((field=>null==field.deprecationReason))}}},inputFields:{type:new GraphQLList(new GraphQLNonNull(__InputValue)),args:{includeDeprecated:{type:GraphQLBoolean,defaultValue:!1}},resolve(type,{includeDeprecated:includeDeprecated}){if(isInputObjectType(type)){const values=Object.values(type.getFields());return includeDeprecated?values:values.filter((field=>null==field.deprecationReason))}}},ofType:{type:__Type,resolve:type=>"ofType"in type?type.ofType:void 0}})}),__Field=new GraphQLObjectType({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new GraphQLNonNull(GraphQLString),resolve:field=>field.name},description:{type:GraphQLString,resolve:field=>field.description},args:{type:new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),args:{includeDeprecated:{type:GraphQLBoolean,defaultValue:!1}},resolve:(field,{includeDeprecated:includeDeprecated})=>includeDeprecated?field.args:field.args.filter((arg=>null==arg.deprecationReason))},type:{type:new GraphQLNonNull(__Type),resolve:field=>field.type},isDeprecated:{type:new GraphQLNonNull(GraphQLBoolean),resolve:field=>null!=field.deprecationReason},deprecationReason:{type:GraphQLString,resolve:field=>field.deprecationReason}})}),__InputValue=new GraphQLObjectType({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new GraphQLNonNull(GraphQLString),resolve:inputValue=>inputValue.name},description:{type:GraphQLString,resolve:inputValue=>inputValue.description},type:{type:new GraphQLNonNull(__Type),resolve:inputValue=>inputValue.type},defaultValue:{type:GraphQLString,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(inputValue){const{type:type,defaultValue:defaultValue}=inputValue,valueAST=astFromValue(defaultValue,type);return valueAST?print(valueAST):null}},isDeprecated:{type:new GraphQLNonNull(GraphQLBoolean),resolve:field=>null!=field.deprecationReason},deprecationReason:{type:GraphQLString,resolve:obj=>obj.deprecationReason}})}),__EnumValue=new GraphQLObjectType({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new GraphQLNonNull(GraphQLString),resolve:enumValue=>enumValue.name},description:{type:GraphQLString,resolve:enumValue=>enumValue.description},isDeprecated:{type:new GraphQLNonNull(GraphQLBoolean),resolve:enumValue=>null!=enumValue.deprecationReason},deprecationReason:{type:GraphQLString,resolve:enumValue=>enumValue.deprecationReason}})});let TypeKind;var TypeKind2;(TypeKind2=TypeKind||(TypeKind={})).SCALAR="SCALAR",TypeKind2.OBJECT="OBJECT",TypeKind2.INTERFACE="INTERFACE",TypeKind2.UNION="UNION",TypeKind2.ENUM="ENUM",TypeKind2.INPUT_OBJECT="INPUT_OBJECT",TypeKind2.LIST="LIST",TypeKind2.NON_NULL="NON_NULL";const __TypeKind=new GraphQLEnumType({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:TypeKind.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:TypeKind.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:TypeKind.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:TypeKind.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:TypeKind.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:TypeKind.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:TypeKind.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:TypeKind.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),SchemaMetaFieldDef={name:"__schema",type:new GraphQLNonNull(__Schema),description:"Access the current type schema of this server.",args:[],resolve:(_source,_args,_context,{schema:schema})=>schema,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},TypeMetaFieldDef={name:"__type",type:__Type,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new GraphQLNonNull(GraphQLString),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(_source,{name:name},_context,{schema:schema})=>schema.getType(name),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},TypeNameMetaFieldDef={name:"__typename",type:new GraphQLNonNull(GraphQLString),description:"The name of the current Object type at runtime.",args:[],resolve:(_source,_args,_context,{parentType:parentType})=>parentType.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};Object.freeze([__Schema,__Directive,__DirectiveLocation,__Type,__Field,__InputValue,__EnumValue,__TypeKind])}}]);